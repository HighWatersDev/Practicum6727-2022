apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hello
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    ingress.pomerium.io/policy: '[{"allow":{"and":[{"domain":{"is":"kubezta.ga"}}]}}]'
    ingress.pomerium.io/pass_identity_headers: "true"
spec:
  ingressClassName: pomerium
  rules:
  - host: hello.pomerium.kubezta.ga
    http:
      paths:
      - backend:
          service:
            name: nginx
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - hello.pomerium.kubezta.ga
    secretName: hello.pomerium.kubezta.ga-tls
---
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: nginx-require-pomerium-jwt
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx # This matches the label applied to our test service
  jwtRules:
  - issuer: "authenticate.pomerium.kubezta.ga" # Adjust to match your Authenticate service URL
    audiences:
      - hello.pomerium.kubezta.ga # This should match the value of spec.host in the services Ingress
    fromHeaders:
      - name: "X-Pomerium-Jwt-Assertion"
    jwksUri: https://authenticate.pomerium.kubezta.ga/.well-known/pomerium/jwks.json # Adjust to match your Authenticate service URL
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: nginx-require-pomerium-jwt
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
  action: ALLOW
  rules:
  - when:
    - key: request.auth.claims[aud]
      values: ["hello.pomerium.kubezta.ga"]
---
apiVersion: crd.projectcalico.org/v1
kind: NetworkPolicy
metadata:
  name: hello
  namespace: default
spec:
  selector: app.kubernetes.io/name == 'nginx'
  ingress:
    - action: Allow
      http:
        methods: ["GET"]
      source:
        namespaceSelector: projectcalico.org/name == 'pomerium'
        serviceAccounts:
          names: ["pomerium-proxy"]
  egress:
    - action: Allow
